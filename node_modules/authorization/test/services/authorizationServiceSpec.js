/**
 * Created by korzhuk.a on 11/7/13.
 */


describe('Authorization service provider', function () {

    var $httpBackend, storage, rootScope, urlConstants;

    beforeEach(angular.mock.module('whatwanted.AuthorizationModule'));
    beforeEach(angular.mock.inject(function ($injector, cookieService, authorizationUrlConstants) {

        $httpBackend = $injector.get('$httpBackend');
        storage = cookieService;

        rootScope = $injector.get('$rootScope');
        urlConstants = authorizationUrlConstants;

        spyOn(rootScope, '$broadcast');

        storage.delete('whatwanted.user');
        storage.delete('whatwanted.ticket');
    }));

    it('when ensure ticket and it exist on client side it should validate ticket on web api',
        angular.mock.inject(function (authService) {

            var expectedHeader = {
                "Accept": "application/json, text/plain, */*",
                "Content-Type": "application/json;charset=utf-8",
                "Authorization": "abc"
            };
            var returnTicket = { Id: expectedHeader.Authorization, DisplayName: 'name', Roles: ['roles'], Email: 'email@domain.com', UserId: '1', XmppSession: { Sid: 'session', Jid: 'user@domain/resource', Rid: 1234567890 }};
            var expectedUser = new User(returnTicket);

            storage.put('whatwanted.ticket', returnTicket.Id);
            storage.put('whatwanted.user', new User(returnTicket));
            $httpBackend
                .expect('POST', urlConstants.VALIDATE_TICKET_URL, {}, expectedHeader)
                .respond(returnTicket);

            authService.ensureTicket();
            $httpBackend.flush();

            expect(authService.getUser()).toEqual(expectedUser);
            expect(rootScope.$broadcast).toHaveBeenCalledWith('userAuthorized', expectedUser);
        }));

    it('when called deauthorizeUser it should deauthorize ticket, remove auth info and call appropriate event',
        angular.mock.inject(function (authService) {

            var expectedHeader = {
                "Accept": "application/json, text/plain, */*",
                "Content-Type": "application/json;charset=utf-8",
                "Authorization": "abc"
            };
            var returnTicket = { Id: expectedHeader.Authorization, DisplayName: 'name', Roles: ['roles'], Email: 'email@mail.com', UserId: '1' };
            var expectedUser = new User(returnTicket);
            var expectedData = {Ticket: {Id: expectedHeader.Authorization, Email: expectedUser.email, Roles: expectedUser.roles, UserId: expectedUser.id}};

            storage.put('whatwanted.user', expectedUser);
            storage.put('whatwanted.ticket', returnTicket.Id);

            spyOn(storage, 'delete');
            $httpBackend
                .expect('POST', urlConstants.DEAUTHORIZE_TICKET_URL, expectedData, expectedHeader)
                .respond(returnTicket);

            var promise = authService.deauthorizeUser();
            $httpBackend.flush();

            expect(storage.delete).toHaveBeenCalledWith('whatwanted.user');
            expect(storage.delete).toHaveBeenCalledWith('whatwanted.ticket');
            expect(rootScope.$broadcast).toHaveBeenCalledWith('userDeauthorized');
            expect(promise).not.toBeUndefined();
        })
    );

    it('when called deauthorizeUser with not exists ticket, remove auth info and call appropriate event, return not undefined',
        angular.mock.inject(function (authService) {

            spyOn(authService, 'getDeAuthTicket').andReturn(null);

            var expectedHeader = {
                "Accept": "application/json, text/plain, */*",
                "Content-Type": "application/json;charset=utf-8",
                "Authorization": "abc"
            };
            var returnTicket = { Id: expectedHeader.Authorization, DisplayName: 'name', Roles: ['roles'], Email: 'email@mail.com', UserId: '1' };
            var expectedUser = new User(returnTicket);

            storage.put('whatwanted.user', expectedUser);
            storage.put('whatwanted.ticket', returnTicket.Id);

            spyOn(storage, 'delete');

            var promise = authService.deauthorizeUser();

            expect(storage.delete).toHaveBeenCalledWith('whatwanted.user');
            expect(storage.delete).toHaveBeenCalledWith('whatwanted.ticket');
            expect(rootScope.$broadcast).toHaveBeenCalledWith('userDeauthorized');
            expect(promise).not.toBeUndefined();
        })
    );

    it('when called issueTicket it should issue correct request',
        angular.mock.inject(function (authService) {

            var expectedHeader = {
                "Accept": "application/json, text/plain, */*"
            };
            var returnTicket = { Id: 'abc', DisplayName: 'name', Roles: null, Email: null, UserId: null };

            spyOn(storage, 'put');
            $httpBackend
                .expect('POST', urlConstants.ISSUE_TICKET_URL, null, expectedHeader)
                .respond(returnTicket);

            authService.issueTicket();
            $httpBackend.flush();

            expect(storage.put).toHaveBeenCalledWith('whatwanted.ticket', returnTicket.Id);
        }));

    it('when called authorizeUser it should issue ticket and authorize it',
        angular.mock.inject(function (authService) {

            var issueTicketExpectedHeader = {
                "Accept": "application/json, text/plain, */*"
            };
            var authorizeTicketExpectedHeader = {
                "Authorization": "abc", "Accept": "application/json, text/plain, */*", "Content-Type": "application/json;charset=utf-8"
            };
            var issuedTicket = { Id: 'abc', Roles: null, Email: null, UserId: null };
            var authorizedTicket = { Id: 'abc', Roles: ['user'], DisplayName: 'name', Email: 'asf@asf.asf', UserId: '1' };
            var user = new User(authorizedTicket);


            spyOn(storage, 'put');
            $httpBackend
                .expect('POST', urlConstants.ISSUE_TICKET_URL, null, issueTicketExpectedHeader)
                .respond(issuedTicket);

            $httpBackend
                .expect('POST', urlConstants.AUTHORIZE_TICKET_URL, {Email: 'login', Password: 'password'}, authorizeTicketExpectedHeader)
                .respond(authorizedTicket);

            authService.authorizeUser('login', 'password');
            $httpBackend.flush();

            expect(storage.put).toHaveBeenCalledWith('whatwanted.user', user, { expires : 604800 });
            expect(storage.put).toHaveBeenCalledWith('whatwanted.ticket', issuedTicket.Id, { expires : 604800 });
        }));

    it('when called authorizeFacebookUser it should issue ticket and authorize it',
        angular.mock.inject(function (authService) {

            var issueTicketExpectedHeader = {
                "Accept": "application/json, text/plain, */*"
            };
            var authorizeTicketExpectedHeader = {
                "Authorization": "abc", "Accept": "application/json, text/plain, */*", "Content-Type": "application/json;charset=utf-8"
            };
            var issuedTicket = { Id: 'abc', Roles: null, Email: null, UserId: null };
            var authorizedTicket = { Id: 'abc', DisplayName: 'name', Roles: ['user'], Email: 'asf@asf.asf', UserId: '1' };
            var user = new User(authorizedTicket);


            spyOn(storage, 'put');
            $httpBackend
                .expect('POST', urlConstants.ISSUE_TICKET_URL, null, issueTicketExpectedHeader)
                .respond(issuedTicket);

            $httpBackend
                .expect('POST', urlConstants.AUTHORIZE_FACEBOOK_TICKET_URL, {AccessToken: 'jkashfkjah15iu25489'}, authorizeTicketExpectedHeader)
                .respond(authorizedTicket);

            authService.authorizeFacebookUser('jkashfkjah15iu25489');
            $httpBackend.flush();

            expect(storage.put).toHaveBeenCalledWith('whatwanted.user', user, { expires : 604800 });
            expect(storage.put).toHaveBeenCalledWith('whatwanted.ticket', issuedTicket.Id, { expires : 604800 });
        }));

    afterEach(function () {

        $httpBackend.verifyNoOutstandingExpectation();
        $httpBackend.verifyNoOutstandingRequest();
        storage.delete('whatwanted.user');
        storage.delete('whatwanted.ticket');
    });
});
