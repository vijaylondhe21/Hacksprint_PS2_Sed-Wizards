/**
 * User: Kupin.R
 * Date: 12/4/13
 */



describe('Authorization Header Interceptor', function(){

    var authToken = 'X-AuthToken';

    beforeEach(angular.mock.module('whatwanted.AuthorizationModule'));

    it('should set auth token when user is authorized', angular.mock.inject(function(authorizationHeaderInterceptor, authorizationUrlConstants, authService){

        spyOn(authService, 'getTicket').andCallFake(function(){
            return authToken;
        });

        var config = authorizationHeaderInterceptor['request']();

        expect(authService.getTicket).toHaveBeenCalled();
        expect(config.headers[authorizationUrlConstants.AUTH_TOKEN_HEADER]).toEqual(authToken);
    }));

    it('should not set auth token when user is not authorized', angular.mock.inject(function(authorizationHeaderInterceptor, authorizationUrlConstants, authService){

        spyOn(authService, 'getTicket').andCallFake(function(){
            return undefined;
        });

        var config = authorizationHeaderInterceptor['request']();

        expect(authService.getTicket).toHaveBeenCalled();
        expect(config.headers[authorizationUrlConstants.AUTH_TOKEN_HEADER]).toBeUndefined();
    }));

});
