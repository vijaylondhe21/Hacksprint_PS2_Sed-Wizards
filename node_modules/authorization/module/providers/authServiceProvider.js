/**
 * User: Kupin.R
 * Date: 11/17/13
 */

angular
    .module('whatwanted.AuthorizationModule')
    .provider('authService', function () {

        this.$get = [
            '$rootScope', 'webApi', 'cookieService', 'authorizationUrlConstants', '$timeout', '$q',
            function ($rootScope, webApi, cookieService, constants, $timeout, $q) {
                return new AuthService($rootScope, $timeout, webApi, cookieService, constants, $q);
            }
        ];

        /**
         * Auth service
         * @constructor
         */
        function AuthService($rootScope, $timeout, webApi, persistentStorage, authorizationUrlConstants, $q) {

            var $rootScope = $rootScope,
                $timeout = $timeout,
                webApi = webApi,
                storage = persistentStorage,
                urlConstants = authorizationUrlConstants,
                isTicketValid = false,
                $this = this;

            /**
             * Authorizes user if credentials are valid
             * @param login
             * @param password
             * @param {string} [deviceToken]
             */
            this.authorizeUser = function (login, password, deviceToken) {

                return this.issueTicket()
                    .then(angular.bind(this, function (ticket) {
                        return webApi
                            .post(urlConstants.AUTHORIZE_TICKET_URL, {Email: login, Password: password, DeviceToken: deviceToken}, { headers: { 'Authorization': ticket } })
                            .then(angular.bind(this, function (response) {
                                this.storeAuthorizationInfo(response.data);
                                return response.data;
                            }));
                    }));
            };

            /**
             * Authorizes facebook user
             * @param {string} token
             * @param {string} [deviceToken]
             */
            this.authorizeFacebookUser = function (token, deviceToken) {

                return this.issueTicket()
                    .then(angular.bind(this, function (ticket) {
                        return webApi
                            .post(urlConstants.AUTHORIZE_FACEBOOK_TICKET_URL, {AccessToken: token, DeviceToken: deviceToken}, { headers: { 'Authorization': ticket } })
                            .then(angular.bind(this, function (response) {
                                this.storeAuthorizationInfo(response.data);
                                return response.data;
                            }));
                    }));
            };

            /**
             * Logs user out
             * @params {string} [deviceToken]
             */
            this.deauthorizeUser = function () {

                var deauthTicket = $this.getDeAuthTicket(),
                    deferObj = $q.defer();

                if (deauthTicket) {

                    return webApi
                        .post(urlConstants.DEAUTHORIZE_TICKET_URL, {Ticket: deauthTicket}, { headers: { 'Authorization': this.getTicket() }})
                        .then(angular.bind(this, this.clearAuthenticationInfo));
                }
                else {

                    this.clearAuthenticationInfo();
                }

                  $rootScope.$broadcast('userDeauthorizing');

                return deferObj.promise;
            };

            /**
             * Ensure that ticket exist, should be called once during app life-cycle
             */
            this.ensureTicket = function () {

                if (isTicketValid == false && angular.isDefined(this.getTicket())) {
                    this.validateTicket();
                }
            };

            /**
             * Get new ticket from server
             */
            this.issueTicket = function () {

                return webApi
                    .post(urlConstants.ISSUE_TICKET_URL)
                    .then(storeTicket, clearTicket);
            };

            /**
             * Return user info
             */
            this.getUser = function () {

                return storage.get(urlConstants.USER_KEY);
            };

            /**
             * Return user info
             */
            this.getTicket = function () {

                return storage.get(urlConstants.TICKET_KEY);
            };

            /**
             * Validate current ticket
             */
            this.validateTicket = function () {

                return webApi
                    .post(urlConstants.VALIDATE_TICKET_URL, {}, { headers: { 'Authorization': this.getTicket() } })
                    .then(angular.bind(this, processTicketValidationResult), angular.bind(this, this.clearAuthenticationInfo));
            };

            /**
             * Save authorized user info
             * @param data
             */
            this.storeAuthorizationInfo = function (data) {

                var user = new User(data);
                storage.put(urlConstants.USER_KEY, user, { expires:604800 }  );
                storage.put(urlConstants.TICKET_KEY, data.Id, { expires:604800 }  );

                isTicketValid = true;
                $rootScope.$broadcast('userAuthorized', user);
            };

            /**
             * Clear user authorization info
             */
            this.clearAuthenticationInfo = function () {

                storage.delete(urlConstants.USER_KEY);
                storage.delete(urlConstants.TICKET_KEY);

                isTicketValid = false;
                $rootScope.$broadcast('userDeauthorized');
            };

            /**
             * Returns ticket to be deAuthorized
             * @returns {{Id: String, UserId: String, Email: String, Roles: Array.<String>}}
             */
            this.getDeAuthTicket = function() {

                var user = $this.getUser();

                if (angular.isDefined(user) === false) {
                    return null;
                }

                var deAuthTicket = angular.extend(
                    {},
                    {Id: $this.getTicket()},
                    {Email: user.email, Roles: user.roles, UserId: user.id}
                );
                if (user.xmppSession) {
                    deAuthTicket.XmppSession = {Jid: user.xmppSession.jid, Sid: user.xmppSession.sid, Rid: user.xmppSession.rid};
                }

                return deAuthTicket;
            };

            /**
             * Analyze validation ticket result
             * @param response
             */
            function processTicketValidationResult(response) {

                if (!response.data.Email || !response.data.UserId) {
                    this.clearAuthenticationInfo()
                }
                else {
                    this.storeAuthorizationInfo(response.data);
                }
            }

            /**
             * Store ticket
             * @param response
             */
            function storeTicket(response) {

                storage.put(urlConstants.TICKET_KEY, response.data.Id);
                return response.data.Id;
            }

            /**
             * Clear ticket
             */
            function clearTicket() {

                storage.delete(urlConstants.TICKET_KEY);
            }
        }
    });